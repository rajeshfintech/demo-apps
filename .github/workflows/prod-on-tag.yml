name: CD • Production Deploy (on PROD tag)

on:
  push:
    tags:
      - 'PROD.*'

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  extract_commit:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.extract.outputs.commit_sha }}
      short_hash: ${{ steps.extract.outputs.short_hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract commit SHA from tag
        id: extract
        run: |
          TAG_NAME="${{ github.ref_name }}"
          echo "🏷️  Processing tag: $TAG_NAME"
          
          # Extract short hash from tag (format: PROD.abc1234)
          if [[ $TAG_NAME =~ ^PROD\.([a-f0-9]+)$ ]]; then
            SHORT_HASH="${BASH_REMATCH[1]}"
            echo "📝 Extracted short hash: $SHORT_HASH"
            
            # Find the full commit SHA that starts with this short hash
            FULL_SHA=$(git rev-list --all | xargs git rev-parse | grep "^$SHORT_HASH" | head -1)
            
            if [ -z "$FULL_SHA" ]; then
              echo "❌ Could not find commit with short hash: $SHORT_HASH"
              exit 1
            fi
            
            echo "✅ Found full commit SHA: $FULL_SHA"
            echo "commit_sha=$FULL_SHA" >> "$GITHUB_OUTPUT"
            echo "short_hash=$SHORT_HASH" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Tag format invalid. Expected: PROD.{shorthash}, got: $TAG_NAME"
            exit 1
          fi

  validate_image:
    needs: extract_commit
    runs-on: ubuntu-latest
    outputs:
      image_digest_ref: ${{ steps.validate.outputs.image_digest_ref }}
    steps:
      - name: Validate container image exists
        id: validate
        run: |
          OWNER="${{ github.repository_owner }}"
          APP="flask-web"
          IMAGE="ghcr.io/${OWNER}/${APP}"
          TAG="sha-${{ needs.extract_commit.outputs.commit_sha }}"
          
          echo "🔍 Validating image exists: ${IMAGE}:${TAG}"
          
          # Install skopeo to inspect the image
          sudo apt-get update -y && sudo apt-get install -y skopeo jq
          
          # Check if image exists and get digest
          if DIGEST=$(skopeo inspect --creds "${OWNER}:${{ secrets.GITHUB_TOKEN }}" "docker://${IMAGE}:${TAG}" | jq -r .Digest 2>/dev/null); then
            echo "✅ Image found with digest: ${DIGEST}"
            echo "image_digest_ref=${IMAGE}@${DIGEST}" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Image not found: ${IMAGE}:${TAG}"
            echo "💡 Make sure the commit ${{ needs.extract_commit.outputs.commit_sha }} has been built and pushed"
            exit 1
          fi

  promote_to_prod:
    needs: [extract_commit, validate_image]
    uses: rajeshfintech/shared-actions/.github/workflows/reusable-promote-image.yml@main
    with:
      image_digest_ref: ${{ needs.validate_image.outputs.image_digest_ref }}
      promote_to: "prod"

  deploy_prod:
    needs: [extract_commit, validate_image, promote_to_prod]
    uses: rajeshfintech/shared-actions/.github/workflows/reusable-deploy-k8s.yml@main
    with:
      aws_region: "${{ vars.AWS_REGION }}"
      aws_role_to_assume: "${{ vars.AWS_ROLE_TO_ASSUME }}"
      cluster_name: "${{ vars.EKS_PROD_CLUSTER }}"
      generate_kubeconfig: true
      namespace: "prod"
      manifest_path: "k8s"
      deployment: "flask-web"
      container: "web"
      image_ref: ${{ needs.validate_image.outputs.image_digest_ref }}
      use_kustomize: false

  summary:
    needs: [extract_commit, validate_image, promote_to_prod, deploy_prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Job Summary
        run: |
          # Extract SHA from image digest reference
          IMAGE_REF="${{ needs.validate_image.outputs.image_digest_ref }}"
          if [[ $IMAGE_REF == *"@sha256:"* ]]; then
            IMAGE_SHA="${IMAGE_REF##*@}"
            IMAGE_BASE="${IMAGE_REF%%@*}"
          else
            IMAGE_SHA="Not available"
            IMAGE_BASE="${IMAGE_REF}"
          fi
          
          echo "# 🏷️ PROD Tag Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Build Metadata" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tag Name** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit SHA** | \`${{ needs.extract_commit.outputs.commit_sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Short Hash** | \`${{ needs.extract_commit.outputs.short_hash }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | Tag Push (Automatic) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tagged By** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run Number** | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Image" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Base** | \`${IMAGE_BASE}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Source Tag** | \`sha-${{ needs.extract_commit.outputs.commit_sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Promoted To** | \`prod\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image SHA** | \`${IMAGE_SHA}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Full Reference** | \`${{ needs.validate_image.outputs.image_digest_ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          # Extract status
          if [ "${{ needs.extract_commit.result }}" == "success" ]; then
            echo "- ✅ **Tag Processing**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Tag Processing**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Validation status
          if [ "${{ needs.validate_image.result }}" == "success" ]; then
            echo "- ✅ **Image Validation**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Image Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Promote status
          if [ "${{ needs.promote_to_prod.result }}" == "success" ]; then
            echo "- ✅ **Image Promotion**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.promote_to_prod.result }}" == "skipped" ]; then
            echo "- ⏭️ **Image Promotion**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Image Promotion**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deploy status
          if [ "${{ needs.deploy_prod.result }}" == "success" ]; then
            echo "- ✅ **Production Deployment**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy_prod.result }}" == "skipped" ]; then
            echo "- ⏭️ **Production Deployment**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Production Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Commit](https://github.com/${{ github.repository }}/commit/${{ needs.extract_commit.outputs.commit_sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/flask-web)" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Environment](https://your-prod-url)" >> $GITHUB_STEP_SUMMARY
          echo "- [View Tag](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          
          # Add final status
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy_prod.result }}" == "success" ]; then
            echo "## 🎉 Automatic Deployment Complete!" >> $GITHUB_STEP_SUMMARY
            echo "Production environment is now running commit \`${{ needs.extract_commit.outputs.short_hash }}\` from tag \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Image SHA**: \`${IMAGE_SHA}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Deployment Method**: Tag-based automatic deployment (no approval required)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Automatic Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details on what went wrong." >> $GITHUB_STEP_SUMMARY
          fi
