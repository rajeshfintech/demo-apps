name: Deploy to Local KIND (Self-Hosted Runner)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'local'
        type: choice
        options:
        - local
  push:
    branches: ["main"]
    paths-ignore:
      - 'README.md'
      - '.gitignore'

permissions:
  contents: read
  packages: write

jobs:
  build_and_deploy_local:
    runs-on: [self-hosted, podman-kind]  # Use your self-hosted runner
    
    steps:
    - name: Checkout code
      run: |
        # Manual checkout since we can't use actions/checkout
        rm -rf * .git* 2>/dev/null || true
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.sha }}

    - name: Set up Python
      run: |
        # Ensure Python and pip are available
        python3 --version
        pip3 --version
        
        # Create virtual environment
        python3 -m venv venv
        source venv/bin/activate
        echo "$(pwd)/venv/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run tests
      run: |
        source venv/bin/activate
        PYTHONPATH=. pytest -q

    - name: Build container image
      run: |
        # Build image with Podman
        IMAGE_TAG="flask-web:${{ github.sha }}"
        podman build -t "$IMAGE_TAG" .
        
        # Save and load into KIND cluster
        podman save "$IMAGE_TAG" -o /tmp/flask-web-image.tar
        podman cp /tmp/flask-web-image.tar kind-control-plane:/tmp/
        podman exec kind-control-plane ctr -n k8s.io images import /tmp/flask-web-image.tar
        rm /tmp/flask-web-image.tar
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        kubectl create namespace local --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to KIND cluster
      run: |
        # Create deployment manifest
        AVAILABLE_IMAGE="localhost/${{ env.IMAGE_TAG }}"
        
        cat > k8s/deployment-ci.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: flask-web
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: flask-web
          template:
            metadata:
              labels:
                app: flask-web
            spec:
              containers:
              - name: web
                image: $AVAILABLE_IMAGE
                imagePullPolicy: Never
                ports:
                - containerPort: 8080
                readinessProbe:
                  httpGet: { path: /healthz, port: 8080 }
                  initialDelaySeconds: 2
                  periodSeconds: 5
                livenessProbe:
                  httpGet: { path: /healthz, port: 8080 }
                  initialDelaySeconds: 5
                  periodSeconds: 10
        EOF
        
        # Apply manifests
        kubectl apply -f k8s/deployment-ci.yaml -n local
        kubectl apply -f k8s/service.yaml -n local

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/flask-web -n local --timeout=300s

    - name: Get deployment info
      run: |
        echo "=== Deployment Status ==="
        kubectl get deployments -n local
        echo "=== Pods ==="
        kubectl get pods -n local -o wide
        echo "=== Services ==="
        kubectl get services -n local
        
        SERVICE_PORT=$(kubectl get service flask-web -n local -o jsonpath='{.spec.ports[0].port}')
        
        echo ""
        echo "🌐 Access your app:"
        echo "kubectl port-forward service/flask-web 8080:$SERVICE_PORT -n local"
        echo "Then visit: http://localhost:8080"

    - name: Cleanup
      run: |
        rm -f k8s/deployment-ci.yaml
