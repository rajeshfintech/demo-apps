name: CD • Production (manual approval)

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Commit SHA to promote to prod"
        required: true

permissions:
  id-token: write
  contents: read
  packages: write
  issues: write
  pull-requests: write

jobs:
  validate_input:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.validate.outputs.commit_sha }}
      short_hash: ${{ steps.validate.outputs.short_hash }}
    steps:
      - name: Validate commit SHA and check image exists
        id: validate
        run: |
          COMMIT_SHA="${{ github.event.inputs.commit_sha }}"
          SHORT_HASH="${COMMIT_SHA:0:8}"
          
          echo "🔍 Validating commit SHA: $COMMIT_SHA"
          echo "📝 Short hash: $SHORT_HASH"
          
          # Validate SHA format (40 hex characters)
          if [[ ! $COMMIT_SHA =~ ^[a-f0-9]{40}$ ]]; then
            echo "❌ Invalid commit SHA format. Expected 40 hex characters."
            exit 1
          fi
          
          # Check if image exists
          OWNER="${{ github.repository_owner }}"
          APP="flask-web"
          IMAGE="ghcr.io/${OWNER}/${APP}"
          TAG="sha-$COMMIT_SHA"
          
          echo "🔍 Checking if image exists: ${IMAGE}:${TAG}"
          
          # Install required tools
          sudo apt-get update -y && sudo apt-get install -y skopeo jq
          
          # Verify image exists
          if skopeo inspect --creds "${OWNER}:${{ secrets.GITHUB_TOKEN }}" "docker://${IMAGE}:${TAG}" >/dev/null 2>&1; then
            echo "✅ Image found: ${IMAGE}:${TAG}"
          else
            echo "❌ Image not found: ${IMAGE}:${TAG}"
            echo "💡 Make sure the commit has been built and pushed to the registry"
            exit 1
          fi
          
          echo "commit_sha=$COMMIT_SHA" >> "$GITHUB_OUTPUT"
          echo "short_hash=$SHORT_HASH" >> "$GITHUB_OUTPUT"

  approval:
    needs: validate_input
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Await human approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "🚀 Approve production deploy for commit ${{ needs.validate_input.outputs.short_hash }}"
          issue-body: |
            ## Production Deployment Approval Required
            
            **Commit SHA:** `${{ needs.validate_input.outputs.commit_sha }}`
            **Short Hash:** `${{ needs.validate_input.outputs.short_hash }}`
            **Image:** `ghcr.io/${{ github.repository_owner }}/flask-web:sha-${{ needs.validate_input.outputs.commit_sha }}`
            
            ### Pre-deployment Checklist
            - [ ] Code changes have been reviewed
            - [ ] Tests are passing
            - [ ] Staging deployment is working correctly
            - [ ] Ready for production deployment
            
            **To approve:** Comment `approved` on this issue
            **To reject:** Comment `denied` on this issue

  compute_digest:
    needs: [validate_input, approval]
    runs-on: ubuntu-latest
    outputs:
      image_digest_ref: ${{ steps.out.outputs.image_digest_ref }}
    steps:
      - name: Resolve image digest
        id: out
        run: |
          OWNER="${{ github.repository_owner }}"
          APP="flask-web"
          IMAGE="ghcr.io/${OWNER}/${APP}"
          TAG="sha-${{ needs.validate_input.outputs.commit_sha }}"
          
          echo "🔍 Getting digest for: ${IMAGE}:${TAG}"
          
          # Install required tools
          sudo apt-get update -y && sudo apt-get install -y skopeo jq
          
          # Get the digest
          if DIGEST=$(skopeo inspect --creds "${OWNER}:${{ secrets.GITHUB_TOKEN }}" "docker://${IMAGE}:${TAG}" | jq -r .Digest); then
            if [ "$DIGEST" != "null" ] && [ -n "$DIGEST" ]; then
              echo "✅ Found image with digest: ${DIGEST}"
              echo "image_digest_ref=${IMAGE}@${DIGEST}" >> "$GITHUB_OUTPUT"
            else
              echo "❌ Invalid digest received: ${DIGEST}"
              exit 1
            fi
          else
            echo "❌ Failed to get digest for: ${IMAGE}:${TAG}"
            exit 1
          fi

  promote_to_prod:
    needs: compute_digest
    uses: rajeshfintech/shared-actions/.github/workflows/reusable-promote-image.yml@main
    with:
      image_digest_ref: ${{ needs.compute_digest.outputs.image_digest_ref }}
      promote_to: "prod"

  deploy_prod:
    needs: [validate_input, compute_digest, promote_to_prod]
    uses: rajeshfintech/shared-actions/.github/workflows/reusable-deploy-k8s.yml@main
    with:
      aws_region: "${{ vars.AWS_REGION }}"
      aws_role_to_assume: "${{ vars.AWS_ROLE_TO_ASSUME }}"
      cluster_name: "${{ vars.EKS_PROD_CLUSTER }}"
      generate_kubeconfig: true
      namespace: "prod"
      manifest_path: "k8s"
      deployment: "flask-web"
      container: "web"
      image_ref: ${{ needs.compute_digest.outputs.image_digest_ref }}
      use_kustomize: false

  summary:
    needs: [validate_input, approval, compute_digest, promote_to_prod, deploy_prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Job Summary
        run: |
          # Extract SHA from image digest reference
          IMAGE_REF="${{ needs.compute_digest.outputs.image_digest_ref }}"
          if [[ $IMAGE_REF == *"@sha256:"* ]]; then
            IMAGE_SHA="${IMAGE_REF##*@}"
            IMAGE_BASE="${IMAGE_REF%%@*}"
          else
            IMAGE_SHA="Not available"
            IMAGE_BASE="${IMAGE_REF}"
          fi
          
          echo "# 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Build Metadata" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit SHA** | \`${{ needs.validate_input.outputs.commit_sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Short Hash** | \`${{ needs.validate_input.outputs.short_hash }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | Manual (with Approval) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Requested By** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run Number** | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Image" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Base** | \`${IMAGE_BASE}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Source Tag** | \`sha-${{ needs.validate_input.outputs.commit_sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Promoted To** | \`prod\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image SHA** | \`${IMAGE_SHA}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Full Reference** | \`${{ needs.compute_digest.outputs.image_digest_ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          # Validation status
          if [ "${{ needs.validate_input.result }}" == "success" ]; then
            echo "- ✅ **Input Validation**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Input Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Approval status
          if [ "${{ needs.approval.result }}" == "success" ]; then
            echo "- ✅ **Manual Approval**: Approved" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.approval.result }}" == "failure" ]; then
            echo "- ❌ **Manual Approval**: Denied" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.approval.result }}" == "cancelled" ]; then
            echo "- ⏸️ **Manual Approval**: Cancelled" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏳ **Manual Approval**: Pending" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Promote status
          if [ "${{ needs.promote_to_prod.result }}" == "success" ]; then
            echo "- ✅ **Image Promotion**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.promote_to_prod.result }}" == "skipped" ]; then
            echo "- ⏭️ **Image Promotion**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Image Promotion**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deploy status
          if [ "${{ needs.deploy_prod.result }}" == "success" ]; then
            echo "- ✅ **Production Deployment**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy_prod.result }}" == "skipped" ]; then
            echo "- ⏭️ **Production Deployment**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Production Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Commit](https://github.com/${{ github.repository }}/commit/${{ needs.validate_input.outputs.commit_sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/flask-web)" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Environment](https://your-prod-url)" >> $GITHUB_STEP_SUMMARY
          
          # Add final status
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy_prod.result }}" == "success" ]; then
            echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
            echo "Production environment is now running commit \`${{ needs.validate_input.outputs.short_hash }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Image SHA**: \`${IMAGE_SHA}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Deployment Issues" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details on what went wrong." >> $GITHUB_STEP_SUMMARY
          fi
